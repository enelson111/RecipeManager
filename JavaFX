package application;

import javafx.application.Application;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

class Recipe {
    private String name;
    private List<String> ingredients;
    private String instructions;
    private String category;

    public Recipe(String name, List<String> ingredients, String instructions, String category) {
        this.name = name;
        this.ingredients = ingredients;
        this.instructions = instructions;
        this.category = category;
    }

    public String getName() {
        return name;
    }

    public String getCategory() {
        return category;
    }

    public List<String> getIngredients() {
        return ingredients;
    }

    public String getInstructions() {
        return instructions;
    }

    @Override
    public String toString() {
        return name + " (" + category + ")";
    }

    // Check if the recipe contains a keyword in the name or ingredients
    public boolean matchesKeyword(String keyword) {
        return name.toLowerCase().contains(keyword.toLowerCase()) || ingredients.stream()
                .anyMatch(ingredient -> ingredient.toLowerCase().contains(keyword.toLowerCase()));
    }

    // Check if the recipe matches the specified category
    public boolean matchesCategory(String category) {
        return category.isEmpty() || this.category.equalsIgnoreCase(category);
    }
}

class RecipeManager {
    private List<Recipe> recipes;

    public RecipeManager() {
        recipes = new ArrayList<>();
    }

    public void addRecipe(Recipe recipe) {
        recipes.add(recipe);
    }

    public List<Recipe> getRecipes() {
        return recipes;
    }

    public Recipe searchRecipe(String name) {
        for (Recipe recipe : recipes) {
            if (recipe.getName().equalsIgnoreCase(name)) {
                return recipe;
            }
        }
        return null;
    }

    public List<Recipe> searchRecipesByKeywordAndCategory(String keyword, String category) {
        return recipes.stream()
                .filter(recipe -> recipe.matchesKeyword(keyword) && recipe.matchesCategory(category))
                .collect(Collectors.toList());
    }
}

public class Main extends Application {
    private RecipeManager recipeManager = new RecipeManager();
    private ObservableList<Recipe> recipeList = FXCollections.observableArrayList();
    private ListView<Recipe> recipeListView = new ListView<>(recipeList);
    private TextArea recipeDetailsArea = new TextArea();
    private TextField searchField = new TextField();
    private ComboBox<String> categoryComboBox = new ComboBox<>();

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Recipe Manager");

        // Add predefined recipes
        addDefaultRecipes();

        // Create the layout containers
        VBox mainLayout = new VBox(10);
        HBox searchBox = new HBox(10);
        HBox inputBox = new HBox(10);
        inputBox.setSpacing(10);

        // Setup Recipe List View
        recipeListView.setPrefHeight(200);
        recipeListView.getSelectionModel().selectedItemProperty().addListener((ObservableValue<? extends Recipe> observable, Recipe oldValue, Recipe newValue) -> {
            if (newValue != null) {
                showRecipeDetails(newValue);
            }
        });

        // Setup TextArea for displaying recipe details
        recipeDetailsArea.setEditable(false);
        recipeDetailsArea.setPrefHeight(200);

        // Search Field and Category ComboBox
        searchBox.getChildren().addAll(new Label("Search: "), searchField);
        
        // Category ComboBox
        categoryComboBox.setItems(FXCollections.observableArrayList("All", "Breakfast", "Lunch", "Dinner", "Dessert", "Snack"));
        categoryComboBox.getSelectionModel().selectFirst(); // Default selection "All"
        
        Button searchButton = new Button("Search");
        searchButton.setOnAction(e -> searchRecipe());
        searchBox.getChildren().addAll(categoryComboBox, searchButton);

        // Input fields for new recipe
        TextField nameField = new TextField();
        nameField.setPromptText("Recipe Name");
        TextField categoryField = new TextField();
        categoryField.setPromptText("Category (e.g. Breakfast)");
        TextField ingredientsField = new TextField();
        ingredientsField.setPromptText("Ingredients (comma separated)");
        TextArea instructionsArea = new TextArea();
        instructionsArea.setPromptText("Instructions");

        Button addButton = new Button("Add Recipe");
        addButton.setOnAction(e -> addRecipe(nameField.getText(), categoryField.getText(), ingredientsField.getText(), instructionsArea.getText()));

        inputBox.getChildren().addAll(nameField, categoryField, ingredientsField, instructionsArea, addButton);

        // Button to list all recipes
        Button listButton = new Button("List All Recipes");
        listButton.setOnAction(e -> listRecipes());

        mainLayout.getChildren().addAll(searchBox, recipeListView, recipeDetailsArea, inputBox, listButton);

        Scene scene = new Scene(mainLayout, 600, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Method to add default recipes
    private void addDefaultRecipes() {
        List<String> ingredients1 = List.of("Eggs", "Bread", "Butter", "Salt", "Pepper");
        recipeManager.addRecipe(new Recipe("Scrambled Eggs", ingredients1, "1. Crack eggs into a bowl. 2. Beat eggs with a fork. 3. Cook in a hot buttered pan.", "Breakfast"));

        List<String> ingredients2 = List.of("Pasta", "Tomato Sauce", "Olive Oil", "Garlic", "Basil");
        recipeManager.addRecipe(new Recipe("Spaghetti Aglio e Olio", ingredients2, "1. Cook pasta. 2. Heat olive oil with garlic in a pan. 3. Toss pasta with oil and tomato sauce.", "Dinner"));

        List<String> ingredients3 = List.of("Flour", "Sugar", "Eggs", "Butter", "Baking Powder", "Vanilla Extract");
        recipeManager.addRecipe(new Recipe("Vanilla Cupcakes", ingredients3, "1. Preheat oven. 2. Mix ingredients. 3. Bake for 20 minutes.", "Dessert"));

        List<String> ingredients4 = List.of("Chicken", "Lemon", "Thyme", "Garlic", "Olive Oil", "Salt", "Pepper");
        recipeManager.addRecipe(new Recipe("Lemon Herb Chicken", ingredients4, "1. Marinate chicken. 2. Roast in oven with herbs.", "Dinner"));

        List<String> ingredients5 = List.of("Avocado", "Lemon", "Cilantro", "Salt", "Pepper", "Chili Flakes");
        recipeManager.addRecipe(new Recipe("Guacamole", ingredients5, "1. Mash avocado. 2. Add lemon, cilantro, salt, pepper, and chili flakes. Mix.", "Snack"));

        // Add the recipes to the ListView
        recipeList.addAll(recipeManager.getRecipes());
    }

    // Add recipe method
    private void addRecipe(String name, String category, String ingredientsText, String instructions) {
        if (name.isEmpty() || category.isEmpty() || ingredientsText.isEmpty() || instructions.isEmpty()) {
            showAlert("All fields must be filled out.");
            return;
        }

        List<String> ingredients = List.of(ingredientsText.split(","));
        Recipe newRecipe = new Recipe(name, ingredients, instructions, category);
        recipeManager.addRecipe(newRecipe);
        recipeList.add(newRecipe);
        clearInputFields();
        showAlert("Recipe added successfully!");
    }

    // Show recipe details in the TextArea
    private void showRecipeDetails(Recipe recipe) {
        String details = "Name: " + recipe.getName() + "\nCategory: " + recipe.getCategory() + "\nIngredients: " + String.join(", ", recipe.getIngredients()) + "\n\nInstructions: \n" + recipe.getInstructions();
        recipeDetailsArea.setText(details);
    }

    // Search recipe by keyword and category
    private void searchRecipe() {
        String keyword = searchField.getText();
        String category = categoryComboBox.getSelectionModel().getSelectedItem();

        // If "All" is selected, we want to ignore the category filter
        List<Recipe> searchResults = recipeManager.searchRecipesByKeywordAndCategory(keyword, category.equals("All") ? "" : category);
        
        if (searchResults.isEmpty()) {
            showAlert("No recipes found for the search criteria.");
        } else {
            recipeList.setAll(searchResults);
        }
    }

    // List all recipes in the ListView
    private void listRecipes() {
        recipeList.clear();
        recipeList.addAll(recipeManager.getRecipes());
    }

    // Show alert dialog
    private void showAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setContentText(message);
        alert.showAndWait();
    }

    // Clear input fields after adding a recipe
    private void clearInputFields() {
        searchField.clear(); // Clear the search field
    }

    public static void main(String[] args) {
        // Launch the JavaFX application
        launch(args);
    }
}
